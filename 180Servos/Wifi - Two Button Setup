#include <WiFi.h>
#include <ESP32Servo.h>

// Define servo pins
static const int servoPin1 = 2;
static const int servoPin2 = 4;
static const int servoPin3 = 19;
static const int servoPin4 = 16;
static const int servoPin5 = 5;

// WiFi credentials
const char* ssid = "Alicia_iPhone";
const char* password = "wackwack123";
WiFiServer server(80);

// Servo objects
Servo servo1, servo2, servo3, servo4, servo5;

void setup() {
    Serial.begin(115200);

    // Attach all servos with 50Hz PWM signal
    servo1.setPeriodHertz(50); servo1.attach(servoPin1);
    servo2.setPeriodHertz(50); servo2.attach(servoPin2);
    servo3.setPeriodHertz(50); servo3.attach(servoPin3);
    servo4.setPeriodHertz(50); servo4.attach(servoPin4);
    servo5.setPeriodHertz(50); servo5.attach(servoPin5);

    Serial.println("Connecting to WiFi...");
    WiFi.begin(ssid, password);

    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
        delay(1000);
        Serial.print(".");
        attempts++;
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nWiFi connected.");
        Serial.print("IP address: ");
        Serial.println(WiFi.localIP());
        server.begin();
    } else {
        Serial.println("\nFailed to connect to WiFi. Will retry in loop.");
    }
}

// Function to move all servos within a range
void moveServos(int start, int end, int step) {
    if (step == 0) return; // Prevent infinite loops

    int pos = start;
    while ((step > 0 && pos <= end) || (step < 0 && pos >= end)) {
        servo1.writeMicroseconds(pos);
        servo2.writeMicroseconds(pos);
        servo3.writeMicroseconds(pos);
        servo4.writeMicroseconds(pos);
        servo5.writeMicroseconds(pos);
        Serial.println(pos);
        pos += step;
        delay(20);
    }
}

void loop() {
    // Check WiFi status and reconnect if necessary
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("Reconnecting to WiFi...");
        WiFi.disconnect();
        WiFi.reconnect();
        delay(5000);  // Wait before retrying
        return;       // Skip the rest of loop() until WiFi is restored
    }

    WiFiClient client = server.available(); // Check for incoming clients
    if (!client) return;

    Serial.println("New Client connected.");
    String request = "";

    while (client.connected()) {
        if (client.available()) {
            char c = client.read();
            Serial.write(c);
            request += c;

            if (c == '\n') {
                if (request.indexOf("GET /H") >= 0) {
                    Serial.println("Closing Hand...");
                    moveServos(500, 1000, 20);
                    moveServos(1000, 2000, 20);
                    moveServos(2000, 2500, 20);
                } 
                else if (request.indexOf("GET /L") >= 0) {
                    Serial.println("Opening Hand...");
                    moveServos(2500, 2000, -20);
                    moveServos(2000, 1000, -20);
                    moveServos(1000, 500, -20);
                }

                // Send HTTP response
                client.println("HTTP/1.1 200 OK");
                client.println("Content-type:text/html");
                client.println();
                client.print("Click <a href=\"/H\">here</a> to close the hand.<br>");
                client.print("Click <a href=\"/L\">here</a> to open the hand.<br>");
                client.println();

                break;
            }
        }
    }
    client.stop();
    Serial.println("Client Disconnected.");
}
