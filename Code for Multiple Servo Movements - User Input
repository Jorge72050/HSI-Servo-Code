#include <ESP32Servo.h>
// Pin assignments for the three servos
static const int servoPin1 = 13;
static const int servoPin2 = 12;
static const int servoPin3 = 14;
// Servo objects
Servo servo1;
Servo servo2;
Servo servo3;
void setup() {
    Serial.begin(115200);        // Initialize serial communication at 115200 baud rate
    // Attach servos to pins
    servo1.attach(servoPin1, 500, 2500);  // Attach Servo 1
    servo2.attach(servoPin2, 500, 2500);  // Attach Servo 2
    servo3.attach(servoPin3, 500, 2500);  // Attach Servo 3
    Serial.println("Enter input in the format: servo_number angle");
    Serial.println("Example: '1 90' to move Servo 1 to 90 degrees.");
}
void loop() {
    // Check if data is available on the Serial input
    if (Serial.available() > 0) {
        String input = Serial.readStringUntil('\n'); // Read the input as a string
        input.trim(); // Remove any extra spaces or newlines
        // Parse the input
        int spaceIndex = input.indexOf(' '); // Find the space separating servo number and angle
        if (spaceIndex != -1) {
            int servoNumber = input.substring(0, spaceIndex).toInt(); // Extract servo number
            int angle = input.substring(spaceIndex + 1).toInt();      // Extract angle
            // Validate input
            if (servoNumber >= 1 && servoNumber <= 3 && angle >= 0 && angle <= 180) {
                Serial.print("Moving Servo ");
                Serial.print(servoNumber);
                Serial.print(" to ");
                Serial.print(angle);
                Serial.println(" degrees...");
                // Map the angle to microseconds in the range 1000â€“2000
                int pulseWidth = map(angle, 0, 180, 1000, 2000);
                // Move the specified servo
                switch (servoNumber) {
                    case 1:
                        servo1.writeMicroseconds(pulseWidth);
                        break;
                    case 2:
                        servo2.writeMicroseconds(pulseWidth);
                        break;
                    case 3:
                        servo3.writeMicroseconds(pulseWidth);
                        break;
                }
                delay(500); // Allow time for the servo to reach the position
            } else {
                Serial.println("Invalid input! Enter a valid servo number (1-3) and angle (0-180).");
            }
        } else {
            Serial.println("Invalid format! Use: servo_number angle (e.g., '1 90').");
        }
        // Clear the Serial input buffer
        while (Serial.available() > 0) {
            Serial.read();
        }
    }
}




